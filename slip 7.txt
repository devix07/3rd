Q1 A
#include <stdio.h>
#include <stdlib.h>
struct BST
{

     int data;
     struct BST *left;
     struct BST *right;

};

typedef struct BST NODE;
NODE *node;
NODE* createtree(NODE *node, int data)

{

     if (node == NULL)
     {

     NODE *temp;
     temp= (NODE*)malloc(sizeof(NODE));
     temp->data = data;
     temp->left = temp->right = NULL;
     return temp;
     }

     if (data < (node->data))
     {
          node->left = createtree(node->left, data);
     }

     else if (data > node->data)
     {
          node -> right = createtree(node->right, data);
     }

     return node;

}

void inorder(NODE *node)
{

     if(node != NULL)
     {
          inorder(node->left);
          printf("%d\t", node->data);
          inorder(node->right);
     }
}

void preorder(NODE *node)
{

     if(node != NULL)
     {
          printf("%d\t", node->data);
          preorder(node->left);
          preorder(node->right);  
     }
}

void postorder(NODE *node)
{

     if(node != NULL)
     {
          postorder(node->left);
          postorder(node->right);
          printf("%d\t", node->data);
     }
}

NODE* findMin(NODE *node)
{

     if(node==NULL)
     {
     return NULL;
     }

     if(node->left)
          return findMin(node->left);

     else
          return node;

}

NODE* del(NODE *node, int data)
{

     NODE *temp;
     if(node == NULL)
     {
          printf("\nElement Not Found...!\n");
     }

     else if(data < node->data)
     {
          node->left = del(node->left, data);
     }

     else if(data > node->data)
     {
          node->right = del(node->right, data);
     }

     else
     {
          if(node->right && node->left)
          {
               temp = findMin(node->right);
               node -> data = temp->data;
               node -> right = del(node->right,temp->data);
          }
          else
          {
               temp = node;
               if(node->left == NULL)
                    node = node->right;
               else if(node->right == NULL)
                    node = node->left;
               free(temp);
          }
     }
     return node;
}

int main()
{
     int data, ch, i, n;
     NODE *root=NULL;
     while (ch!=6)
     {
          printf("\n\n1.Insertion in Binary Search Tree");
          printf("\n2.Delete Element in Binary Search Tree");
          printf("\n3.Inorder");
          printf("\n4.Preorder");
          printf("\n5.Postorder");
          printf("\n6.Exit\n");
          printf("\nEnter your Choice: ");

          scanf("%d", &ch);

          switch (ch)
          {
               case 1:   printf("\nEnter size of tree: " );
                         scanf("%d", &n);
                         printf("\nEnter the elements of tree)\n");

                         for(i=0; i<n; i++)
                         {
                              scanf("%d", &data);
                              root=createtree(root, data);
                         }
                         break;

               case 2:   printf("\nEnter the Element to Delete: ");
                         scanf("%d", &data);
                         root=del(root, data);
                         break;

               case 3:   printf("\nInorder Traversal: \n");
                         inorder(root);
                         break;

               case 4:   printf("\nPreorder Traversal: \n");
                         preorder(root);          
                         break;

               case 5:   printf("\nPostorder Traversal: \n");
                         postorder(root);    
                         break;

               case 6:   exit(0);

               default:  printf("\nEnter valid choice\n");
                         break;

          }
     }
}
_____________________________________________________________________________________________________________________________________________________

Q1 B

#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node * next;
};
struct node* head=NULL;

struct node *cn()
{
    struct node* n;
    n=(struct node *)malloc(sizeof(struct node));
    return(n);
}

void createnode()   //Function to create Linked list.
{
    int i,n,x;
    struct node * temp,*newnode;
    printf("Enter size of linked list :\n");
    scanf("%d",&n);
    printf("Enter elements of linked list :\n");
    for(i=1;i<=n;i++)
    {
        scanf("%d",&x);
        if(head==NULL)  //checking in linked list is empty
        {
            head=cn();
            head->data=x;
            head->next=NULL;
            temp=head;
        }
        else
        { 
            newnode=cn();
            newnode->data=x;
            newnode->next=NULL;
            temp->next=newnode;
            temp=newnode;
        }
    }
}


void traverse()     //Function to traverse Linked list.
{
    struct node * temp;
    int cnt=0;
    temp=head;
    while(temp!=NULL)
    {
        printf("%d\n",temp->data);
        temp=temp->next;
        cnt++;
    }
    printf("Total number of node :%d",cnt);
}





void main()
{
    int choice,a=0;
    while(choice!=3)
    {
        printf("\n\n1. Create Linked list.\n");
        printf("2. Display Linked list.\n");
        printf("3. Exit\n\n");
        scanf("%d",&choice);
        printf("\n");
        switch(choice)
        {
            case 1: if(a==1)
                    {
                        printf("You have already created a Linked list.");
                    }
                    else
                    {   createnode();
                        a++;
                    }
                    break;

            case 2: traverse();
                    break;

            

            case 3: exit(0);

            defalut: printf("Enter a valid choice\n");
        }
    }
}
___________________________________________________________________________________________________________________________________________________

Q2

HTML File:

<html>
<form action='ass2a1.php' method='post'>
<pre>   <h3>OPERATIONS</h3>                                                                                                                    
        1<input type='radio' name='a' value='1'>Display.<br>
        2<input type='radio' name='a' value='2'>size.<br>
        3<input type='radio' name='a' value='3'>delete.<br>
        4<input type='radio' name='a' value='4'>reverse.<br>
        5<input type='radio' name='a' value='5'>traverse.<br>
        <input type='submit' value='ok'>        <input type='reset' value='cancel'><br>
</pre>
</form>
</body>
</html>

PHP Function:

NOTE: PHP function is saved as "ass2a1.php"

<?php
        $array=array('zero'=>0,'one'=>1,'two'=>2,'three'=>3,'four'=>4,'five'=>5);
        $ch=$_POST['a'];
        switch($ch)
        {
        case 1:foreach($array as $key=>$value)
                {
                        echo"key:$key       val:$value.<br>";
                }break;
        case 2:echo sizeof($array);
                break;
        case 3 :
                $len=sizeof($array);               
                array_splice($array,$len);
                print_r( $array);
                break;
        case 4 :
                print_r(array_flip($array));
                break;
        case 5 :
                shuffle($array);
                print_r($array);
                break;
     
              
        }

?>
_____________________________________________________________________________________________________________________________________________

Q3

Employees = data.frame(Name=c("Sagar","Dinesh","Komal", "Jasmine","Lalit"),
                       Gender=c("M","M","F","F","M"),
                       Age=c(23,22,25,26,32),
                       Designation=c("Clerk","Manager","Exective","CEO","ASSISTANT")
)
print("Details of the employees:")                      
print(Employees)

Employees[order(Employees$Name,decreasing=FALSE),]
===========================================================================================================================================