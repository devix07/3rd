Q1 A


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX 50
struct Stack
{
    int top;
    unsigned capacity;
    int* array;
};

struct Stack* createStack( unsigned capacity )
{
    struct Stack* stack = (struct Stack*)
           malloc(sizeof(struct Stack));
 
    if (!stack)
        return NULL;
 
    stack->top = -1;
    stack->capacity = capacity;
 
    stack->array = (int*) malloc(stack->capacity *
                                   sizeof(int));
 
    return stack;
}

int isEmpty(struct Stack* stack)
{
    return stack->top == -1 ;
}
char peek(struct Stack* stack)
{
    return stack->array[stack->top];
}
char pop(struct Stack* stack)
{
    if (!isEmpty(stack))
        return stack->array[stack->top--] ;
    return '$';
}
void push(struct Stack* stack, char op)
{
	stack->array[++stack->top] = op;
}

int isOperand(char ch)
{
    return (ch >= 'a' && ch <= 'z') ||
           (ch >= 'A' && ch <= 'Z');
}

int Prec(char ch)
{
    switch (ch)
    {
    case '+':
    case '-':
        return 1;
 
    case '*':
    case '/':
        return 2;
 
    case '^':
        return 3;
    }
    return -1;
}
 
 int infixToPostfix(char* exp)
{
    int i, k;
 
    
    struct Stack* stack = createStack(strlen(exp));
    if(!stack) 
        return -1 ;
 
    for (i = 0, k = -1; exp[i]; ++i)
    {
         
       
        if (isOperand(exp[i]))
            exp[++k] = exp[i];
         
       
        else if (exp[i] == '(')
            push(stack, exp[i]);
         
        
        else if (exp[i] == ')')
        {
            while (!isEmpty(stack) && peek(stack) != '(')
                exp[++k] = pop(stack);
            if (!isEmpty(stack) && peek(stack) != '(')
                return -1;            
            else
                pop(stack);
        }
        else 
        {
            while (!isEmpty(stack) &&
                 Prec(exp[i]) <= Prec(peek(stack)))
                 exp[++k] = pop(stack);
            push(stack, exp[i]);
        }
 
    }
 
    
    while (!isEmpty(stack))
        exp[++k] = pop(stack );
 
    exp[++k] = '\0';
    printf( "%s", exp );
}

int main()
{
	
	
    char exp[MAX] ;
    printf("ENter the EXpression\n");
    scanf("%s",exp);
    
    
    infixToPostfix(exp);
    return 0;
}


___________________________________________________________________________________________________________________________________________-

Q1 B


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct stack
{
    int data;
    struct stack * next;
};
struct stack *top=NULL;

struct stack *cn()
{
    struct stack *n;
    n=(struct stack *)malloc(sizeof(struct stack));
    return (n);
}

void push()
{
    struct stack *newnode;
    int x;
    printf("Enter element of stack :\n");
    scanf("%d",&x);
      if(top==NULL)
    {
        newnode=cn();
        newnode->data=x;
        newnode->next=NULL;
        top=newnode;
        
    }
    else
    {
        newnode=cn();
        newnode->data=x;
        newnode->next=top;
        top=newnode;
        
    }
    printf("Element pushed successfully.\n");
}

void pop()
{
    int pop,flag=0,item;
    struct stack *temp;
    if(top==NULL)
    {
        printf("Stack is empty.\n");
    }
    else
    {
        temp=top;
        temp->data=item;
        top=top->next;
        free(temp);
        flag=1;
    }
    if(flag==1)
    {
        printf("Element popped successfully.\n");
    }   
}

void display()
{
    struct stack *temp;
    printf("\n");
    if(top==NULL)
    {
        printf("Stack is empty.\n");
    }
    else
    {
        temp=top;
        while(temp->next!=NULL)
        {
            printf("%d\n",temp->data);
            temp=temp->next;
        }
        printf("%d\n",temp->data);
    }
}

void main()
{
    int choice;
    while(choice!=4)
    {
        printf("\n\n1. Push\n");
        printf("2. Pop\n");
        printf("3. Display\n");
        printf("4. Exit\n\n");
        scanf("%d",&choice);

        switch(choice)
        {
            case 1: push();
                    break;

            case 2: pop();
                    break;

            case 3: display();
                    break;

            case 4: exit(0);
                    break;
            default: printf("Enter a valid choice.\n");
        }
    }
}


___________________________________________________________________________________________________________________________________________-


Q2


html function:



<!DOCTYPE html>
<html>
  <body>
    <form action="slip15.php" method="GET">
      Please select your gelosery<br />
      <input type="checkbox" name="check_b[]" value="rice" />Rice<br />
      <input type="checkbox" name="check_b[]" value="oils" />Oils<br />
      <input type="checkbox" name="check_b[]" value="milk" />Milk<br />
      <input type="checkbox" name="check_b[]" value="bread" />Bread<br />
      <input type="submit" value="sumbit" />
    </form>
  </body>
</html>

 
 php function:

<?php
$hostname="127.0.0.1";
$db_name="grecery";
$username="root";
$password="";
$connection=mysqli_connect("$hostname","$username","$password","$db_name")or
die("unable to connect");
if(!$connection){
    echo"Error:Unable to connect to MySQL.<br>";
    echo"<br>Debugging errno: ".mysqli_connect_errno();
    echo"<br>Debugging errno: ".mysqli_connect_errno();
    exit;
}
if($stmt =$connection->query("SELECT * FROM `bill` ")){
    echo "<table border='2'>";
    echo "<tr><td>sr.no</td><td>Name Item</td><td>Quntity</td><td>Rate</td><td>Amount</td></tr>";
    while($row=$stmt->fetch_assoc()){
    echo "<tr><td>".$row['s.no']."</td>";
    echo"<td>". $row['Name Item']."</td>";
    echo "<td>".$row['Quntity']."</td>";
    echo "<td>".$row['Rate']."</td>";
    echo "<td>".$row['Amount']."</td></tr>";
}
echo "</table>";
}
?>


___________________________________________________________________________________________________________________________________________-


Q3

L = sample(LETTERS,size=20,replace=TRUE)
print("Original data:")
print(L)
f = factor(L)
print("Original factors:")
print(f)
print("Only five of the levels")
print(table(L[1:5]))


================================================================================================================================================