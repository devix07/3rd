Q1 A


#include <stdio.h>
#include <stdlib.h>
#define SIZE 40
int n;

struct queue {
  int items[SIZE];
  int front;
  int rear;
};

struct queue* createQueue();
void enqueue(struct queue* q, int);
int dequeue(struct queue* q);
void display(struct queue* q);
int isEmpty(struct queue* q);
void printQueue(struct queue* q);

struct node {
  int vertex;
  struct node* next;
};

struct node* createNode(int);

struct Graph {
  int numVertices;
  struct node** adjLists;
  int* visited;
};

// BFS algorithm
void bfs(struct Graph* graph, int startVertex) {
  struct queue* q = createQueue();

  graph->visited[startVertex] = 1;
  enqueue(q, startVertex);

  while (!isEmpty(q)) {
    printQueue(q);
    int currentVertex = dequeue(q);
    printf("\nVisited %d\n", currentVertex);

    struct node* temp = graph->adjLists[currentVertex];

    while (temp) {
      int adjVertex = temp->vertex;

      if (graph->visited[adjVertex] == 0) {
        graph->visited[adjVertex] = 1;
        enqueue(q, adjVertex);
      }
      temp = temp->next;
    }
  }
}

// Creating a node
struct node* createNode(int v) {
  struct node* newNode = malloc(sizeof(struct node));
  newNode->vertex = v;
  newNode->next = NULL;
  return newNode;
}

// Creating a graph
struct Graph* createGraph(int vertices) {
  struct Graph* graph = malloc(sizeof(struct Graph));
  graph->numVertices = vertices;

  graph->adjLists = malloc(vertices * sizeof(struct node*));
  graph->visited = malloc(vertices * sizeof(int));

  int i;
  for (i = 0; i < vertices; i++) {
    graph->adjLists[i] = NULL;
    graph->visited[i] = 0;
  }

  return graph;
}
void addEdge(struct Graph* graph,int graph_type) 
{
  int i,max_edges,u,v;
  if(graph_type==1)
    {
        max_edges = n*(n-1)/2;
    }
    else
    {
        max_edges = n*(n-1);
    }
  for(i=1;i<=max_edges;i++)
  {
    printf("Enter edge [%d] (-1 -1 to quit): ",i);
    scanf("%d%d",&u,&v);
    if((u==-1)&&(v==-1))
    {
      break;
    }
    else if(u>=n || v>=n || u<0 || v<0)
    {
      printf("Invalid vertex\n");
      i--;
    }
    else
    {
      // Add edge from s to d
      struct node* newNode = createNode(v);
      newNode->next = graph->adjLists[u];
      graph->adjLists[u] = newNode;

      if(graph_type==1)
      {     // Add edge from d to s
            newNode = createNode(u);
            newNode->next = graph->adjLists[v];
            graph->adjLists[v] = newNode;
      }
    }
  }
}


// Create a queue
struct queue* createQueue() {
  struct queue* q = malloc(sizeof(struct queue));
  q->front = -1;
  q->rear = -1;
  return q;
}

// Check if the queue is empty
int isEmpty(struct queue* q) {
  if (q->rear == -1)
    return 1;
  else
    return 0;
}

// Adding elements into queue
void enqueue(struct queue* q, int value) {
  if (q->rear == SIZE - 1)
    printf("\nQueue is Full!!");
  else {
    if (q->front == -1)
      q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
  }
}

// Removing elements from queue
int dequeue(struct queue* q) {
  int item;
  if (isEmpty(q)) {
    printf("Queue is empty");
    item = -1;
  } else {
    item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
      printf("\nResetting queue ");
      q->front = q->rear = -1;
    }
  }
  return item;
}

// Print the queue
void printQueue(struct queue* q) {
  int i = q->front;

  if (isEmpty(q)) {
    printf("Queue is empty");
  } else {
    printf("\nQueue contains \n");
    for (i = q->front; i < q->rear + 1; i++) {
      printf("%d ", q->items[i]);
    }
  }
}


int main()
{
    int graph_type;
    printf("\nEnter 1 for Undirected graph\nEnter 2 for Directed graph\n");
    printf("\nEnter your choice :: ");
    scanf("%d",&graph_type);
    printf("Enter number of vertices :\n");
    scanf("%d",&n);

    struct Graph* graph = createGraph(n);
    addEdge(graph,graph_type);

    bfs(graph, 0);

    return 0;
}


___________________________________________________________________________________________________________________________________________-


Q1 B


#include<stdio.h>
#include<conio.h>

void main() {
	int arr[100], n, i, search;
	
	printf("Enter the number of elements you want in the array: ");
	scanf("%d", &n);
	
	for(i=0; i<n; i++)
	{
		printf("Enter value for index %d: ", i);
		scanf("%d", &arr[i]);
	}
	
	printf("\nEnter the number you want to search in the array: ");
	scanf("%d", &search);
	
	for(i=0; i<n; i++) {
		if(arr[i] == search) {
			printf("\n%d found at %d position.\n", search, i);
			break;
		}
	}
	
	if(i == n) {
		printf("\n%d not found in the array.\n",search);
	}
}


___________________________________________________________________________________________________________________________________________-


Q2


cookies.html


<html>
<head><title>COOKIES PROGRAM</title></head>
<body>
<form action="form2.php" method="post">
Enter name<input type="text"name="name" value=""><br>
Enter  class<input type="text"name="class" value=""><br>
Enter  address<input type="text"name="address" value=""><br>
<input type="submit"name="submit" value="submit">
</form>
</body>
</html>


form2.php

<?php
$name=$_POST['name'];
$class=$_POST['class'];
$address=$_POST['address'];
setcookie("name","$name",time()+3660);
setcookie("class","$class",time()+3600);
setcookie("address","$address",time()+3600);
?>

<html>
<body>
<head><title>ACCEPT THE MARKS OF SUBJECT</title></head>
<form action="form3.php" method="post">
Enter MARKS OF PHYSICS<input type="text"name="phy" value=""><br>
Enter  MARKS OF CHEM<input type="text"name="chem" value=""><br>
Enter  MARKS OF BIOLOGY<input type="text"name="bio" value=""><br>
Enter MARKS OF MATHS<input type="text"name="maths" value=""><br>
Enter  MARKS OF MARATHI<input type="text"name="marathi" value=""><br>
Enter  MARKS OF ENGLISH<input type="text"name="eng" value=""><br>
<input type="submit"name="submit" value="submit">
</form>
</body>
</html>

form3.php

<?php
$x=$_COOKIE['name'];
$y=$_COOKIE['class'];
$z=$_COOKIE['address'];
$bio=$_POST['bio'];
$chem=$_POST['chem'];
$maths=$_POST['maths'];
$mara=$_POST['marathi'];
$eng=$_POST['eng'];
$phy=$_POST['phy'];
$total=$chem+$bio+$phy+$maths+$mara+$eng;
$per=$total/6.0;
?>
<html>
<table border="2">
<tr>
<th colspan="2">MARKSHEET</th>
</tr>
<tr>
<td colspan="2"><b>NAME:</b><?php echo "$x"?><br>
				<b>CLASS:</b><?php echo "$y"?><br>
				<b>ADDRESS:</b><?php echo "$z"?><br>
</tr>
<tr>
<td colspan="2">PHYSICS
<td><?php echo "$phy"?></td>
</tr>
<tr>
<td colspan="2">CHEMISTRY
<td><?php echo "$chem"?></td>
</tr>
<tr>
<td colspan="2">BIOLOGY
<td><?php echo "$bio"?></td>
</tr>
<tr>
<td colspan="2">MATHS
<td><?php echo "$maths"?></td>
</tr>
<tr>
<td colspan="2">MARATHI
<td><?php echo "$mara"?></td>
</tr>
<tr>
<td colspan="2">ENGLISH
<td><?php echo "$eng"?></td>
</tr>
<tr>
<td colspan="2">TOTAL
<td><?php echo "$total"?></td>
</tr>
<tr>
<td colspan="2">PERCENTAGE
<td><?php echo "$per"?></td>
</tr>
</table>
</html>


___________________________________________________________________________________________________________________________________________-



Q3


data(PlantGrowth)
dataset<-PlantGrowth 
library(caret)
x<-dataset[,1:1]
y<-dataset[ ,2]
y
library(dplyr)


library(ggplot2)
dataset %>% ggplot(aes(x=y)) + geom_bar() + labs(x = "Iris Flower Species")
scales<-list(x = list(relation = "free"), y = list(relation = "free"))
featurePlot(x = x, y = y, plot = "density", scales = scales)


================================================================================================================================================