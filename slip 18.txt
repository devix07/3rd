Q1 A


#include<stdio.h>
#include<stdlib.h>
struct binary_tree
{
    int info;
    struct binary_tree *left;
    struct binary_tree *right;
};
typedef struct binary_tree NODE;
NODE *node=NULL;

NODE *newnode(int data)
{
    NODE *temp;
    temp= (NODE*)malloc(sizeof(NODE));
    temp->info = data;
    temp->left = NULL;temp->right = NULL;
    return temp;
}

NODE *insertLevelOrder(int arr[],NODE *root,int i,int n)
{
    if(i<n)
    {
        NODE *temp=newnode(arr[i]);
        root=temp;

        root->left=insertLevelOrder(arr,root->left,(2*i)+1,n);

        root->right=insertLevelOrder(arr,root->right,(2*i)+2,n);
    }
    return root;
}

unsigned int count(NODE *node)
{
    if(node==NULL)
    {
        return 0;
    }
    else
    {
        return 1+count(node->left)+count(node->right);
    }
}

unsigned int getLeafCount(NODE *node) 
{ 
  if(node == NULL)        
    return 0; 
  if(node->left == NULL && node->right==NULL)       
    return 1;
  else              
    return getLeafCount(node->left)+ 
           getLeafCount(node->right);       
}



int degree(NODE *node)
{
    if(node==NULL)
    {
        printf("Tree is empty\n");
    }
    else if(node->left==NULL && node->right==NULL)
    {
        return 0;
    }
    else if(node->left && node->right)
    {
        return 2;
    }
    else if(node->left || node->right)
    {
        return 1;
    }
   
}



int main()
{
     int data,ch,i,n,arr[50],count1,count2,count3;
     NODE *root=NULL;
     while (ch!=5)
     {
          printf("\n\n1.Insertion in Binary Search Tree");
          printf("\n2.Total number of nodes");
          printf("\n3.Degree of tree");
          printf("\n4.Leaf nodes");
          printf("\n5.Exit");
          printf("\nEnter your Choice: \n");

          scanf("%d", &ch);

          switch (ch)
          {
                case 1: printf("\nEnter size of tree: " );
                        scanf("%d", &n);
                        printf("\nEnter the Values to Create Binary tree\n");

                        for(i=0; i<n; i++)
                        {
                           scanf("%d",&arr[i]);                              
                        }
                        root=insertLevelOrder(arr,root,0,n);
                        break;

                case 2: count1=count(root);
                        printf("Number of nodes :%d\n",count1);
                        break;

                case 3: count2=degree(root);
                        printf("Degree of tree :%d\n",count2);
                        break; 
                        
                case 4: count3=getLeafCount(root);
                        printf("Number of Leaf nodes :%d\n",count3);
                        break;

                case 5: exit(0);

                default: printf("\nSelect a valid option\n");
                        break;
          }
     }
}


___________________________________________________________________________________________________________________________________________


Q1 B


#include<stdio.h>
void mergeSort(int [],int,int,int);
void partition(int [],int,int);
void main()
{
    int A[50],n,i;
    printf("Enter size of Array :\n");
    scanf("%d",&n);
    printf("Enter elements of array :\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&A[i]);
    }
    partition(A,0,n-1);
    printf("Sorted Array :\n");
    for(i=0;i<n;i++)
    {
        printf("%d\n",A[i]);
    }
}
void partition(int A[],int low,int high)
{
    int mid;
    if(low<high)
    {
        mid=(low+high)/2;
        partition(A,low,mid);
        partition(A,mid+1,high);
        mergeSort(A,low,mid,high);
    }
}
void mergeSort(int A[],int low,int mid,int high)
{
    int i,m,k,l,temp[50];
    l=i=low;
    m=mid+1;
    while((l<=mid)&&(m<=high))
    {
        if(A[l]<=A[m])
        {
            temp[i]=A[l];
            l++;
        }
        else
        {
            temp[i]=A[m];
            m++;
        }
        i++;
    }
    while(l<=mid)
    {
	    temp[i]=A[l];
	    l++;
	    i++;
    }
    while(m<=high)
    {
	    temp[i]=A[m];
	    i++;
	    m++;
    }
    
    for(k=low;k<=high;k++)
    {
        A[k]=temp[k];
    }
}


___________________________________________________________________________________________________________________________________________-


Q2


Html file :

<html>
<body>
<form action="slip_4-1.php" method="post">

<center>
<h2>   Enter Username :  <input type="text" name="name">   </h2>
<h2>   Enter Password :  <input type="text" name="pwd">    </h2>
<input type="submit" value="Login">
</center>

</form>
</body>
</html>


slip_4-1.php  :

<?php
session_start();
$t=date("1,d-m-y h:i:s",time()+20);

if($_REQUEST['name']=='xyzâ€™ && $_REQUEST['pwd']=='xyz')
{
   ?>
<html>
<body>
<h1>  <u><center>enter ur details</center></u>  </h1>
<form action="slip_4-2.php" method=get>
<input type='hidden' name='etime' value="<?php echo $t?>">
<h2>  Enter Name : <input type=textbox name=uname>   </h2><br>
<h2>  Enter City : <input type=textbox name=city>          </h2><br>
<h2>  Enter Phone No : <input type=textbox name=pno> </h2><br>
<input type=submit name=submit value=DISPLAY>
</form>
</body>
</html>
<?php
}
else echo "<center><h1>Invalid Username Or Password</h1></center>"
?>

slip_4-2.php  :

<?php
session_start();
$t=$_REQUEST['etime'];
$exp=date("1,d-m-y h:i:s",time());

if($t<$exp)
echo "<center><h1>Page Time Expired</h1></center>";
else
{
echo "<center><h2>Name : ".$_REQUEST['uname']."</h2></center>";
echo "<center><h2>City : ".$_REQUEST['city']."</h2></center>";
echo "<center><h2>Phone NO : ".$_REQUEST['pno']."</h2></center>";
session_destroy();
}          
?>


___________________________________________________________________________________________________________________________________________-


q3


a<-c(10,20,30)
b<-c(40,50,60)
c<-c(70,80,90)
m<-cbind(a,b,c)
print("Content of the matrix:")
print(m)


================================================================================================================================================