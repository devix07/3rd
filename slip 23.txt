Q1 A


#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node * next;
};
struct node* head=NULL;

struct node *cn()
{
    struct node* n;
    n=(struct node *)malloc(sizeof(struct node));
    return(n);
}

void createnode()   //Function to create Linked list.
{
    int i,n,x;
    struct node * temp,*newnode;
    printf("Enter size of linked list :\n");
    scanf("%d",&n);
    printf("Enter elements of linked list :\n");
    for(i=1;i<=n;i++)
    {
        scanf("%d",&x);
        if(head==NULL)  //checking in linked list is empty
        {
            head=cn();
            head->data=x;
            head->next=NULL;
            temp=head;
        }
        else
        { 
            newnode=cn();
            newnode->data=x;
            newnode->next=NULL;
            temp->next=newnode;
            temp=newnode;
        }
    }
}


void traverse()     //Function to traverse Linked list.
{
    struct node * temp;
    temp=head;
    while(temp!=NULL)
    {
        printf("%d\n",temp->data);
        temp=temp->next;
    }
}


void insertnode()   //Function to insert node in Linked list.
{
    struct node * temp,*newnode;
    int pos,i=1,x;

    printf("Enter position for insertion of new node :\n");
    scanf("%d",&pos);

    printf("Enter value for that node :\n");
    scanf("%d",&x);
    newnode=cn();
    newnode->data=x;
    newnode->next=NULL;
    temp=head;
    
    

    if(head==NULL)  //checking in linked list is empty
    {
        head=newnode;
        head->next=NULL;
        
    }


    if(pos==1)
    {
        newnode->next=head;
        head=newnode;
    }
    else

    {
        while((i<pos-1)&&(temp!=NULL))
        {
            temp=temp->next;
            i++;
        }

        if(temp==NULL)
        {
            printf("Position out of bound.\n");
        }
        else
        {
                newnode->next=temp->next;
                temp->next=newnode;
        }
    }
    printf("node inserted\n");
}


void deletenode()   //Function to delete a node from Linked list.
{
    struct node * temp,*temp1;
    int pos,i=1,x;

    printf("Enter position for deletion :\n");
    scanf("%d",&pos);
    temp=head;
    if(head==NULL)
    {
        printf("Linked list is empty. \n");
    }
    else if(pos==1)
    {
        head=head->next;
        free(temp);
    }
    else
    {
        while((i<pos-1) && (temp!=NULL))
        {
            temp=temp->next;
            i++;
        }

        if(temp!=NULL)
        {
            temp1=temp->next;
            temp->next=temp1->next;

            free(temp1);
        }
        else
        {
            printf("Position out of bound.\n");
        }
    }
}


void main()
{
    int choice,a=0;
    while(choice!=5)
    {
        printf("\n\n1. Create Linked list.\n");
        printf("2. Display Linked list.\n");
        printf("3. Insert node at any position.\n");
        printf("4. Delete a node from any position.\n");
        printf("5. Exit\n\n");
        scanf("%d",&choice);
        printf("\n");
        switch(choice)
        {
            case 1: if(a==1)
                    {
                        printf("You have already created a Linked list.");
                    }
                    else
                    {   createnode();
                        a++;
                    }
                    break;

            case 2: traverse();
                    break;

            case 3: insertnode();
                    break;

            case 4: deletenode();
                    break;

            case 5: exit(0);

            defalut: printf("Enter a valid choice\n");
        }
    }
}


#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node * next;
};
struct node* head=NULL;

struct node *cn()
{
    struct node* n;
    n=(struct node *)malloc(sizeof(struct node));
    return(n);
}

void createnode()   //Function to create Linked list.
{
    int i,n,x;
    struct node * temp,*newnode;
    printf("Enter size of linked list :\n");
    scanf("%d",&n);
    printf("Enter elements of linked list :\n");
    for(i=1;i<=n;i++)
    {
        scanf("%d",&x);
        if(head==NULL)  //checking in linked list is empty
        {
            head=cn();
            head->data=x;
            head->next=NULL;
            temp=head;
        }
        else
        { 
            newnode=cn();
            newnode->data=x;
            newnode->next=NULL;
            temp->next=newnode;
            temp=newnode;
        }
    }
}


void traverse()     //Function to traverse Linked list.
{
    struct node * temp;
    temp=head;
    while(temp!=NULL)
    {
        printf("%d\n",temp->data);
        temp=temp->next;
    }
}


void insertnode()   //Function to insert node in Linked list.
{
    struct node * temp,*newnode;
    int pos,i=1,x;

    printf("Enter position for insertion of new node :\n");
    scanf("%d",&pos);

    printf("Enter value for that node :\n");
    scanf("%d",&x);
    newnode=cn();
    newnode->data=x;
    newnode->next=NULL;
    temp=head;
    
    

    if(head==NULL)  //checking in linked list is empty
    {
        head=newnode;
        head->next=NULL;
        
    }


    if(pos==1)
    {
        newnode->next=head;
        head=newnode;
    }
    else

    {
        while((i<pos-1)&&(temp!=NULL))
        {
            temp=temp->next;
            i++;
        }

        if(temp==NULL)
        {
            printf("Position out of bound.\n");
        }
        else
        {
                newnode->next=temp->next;
                temp->next=newnode;
        }
    }
    printf("node inserted\n");
}


void deletenode()   //Function to delete a node from Linked list.
{
    struct node * temp,*temp1;
    int pos,i=1,x;

    printf("Enter position for deletion :\n");
    scanf("%d",&pos);
    temp=head;
    if(head==NULL)
    {
        printf("Linked list is empty. \n");
    }
    else if(pos==1)
    {
        head=head->next;
        free(temp);
    }
    else
    {
        while((i<pos-1) && (temp!=NULL))
        {
            temp=temp->next;
            i++;
        }

        if(temp!=NULL)
        {
            temp1=temp->next;
            temp->next=temp1->next;

            free(temp1);
        }
        else
        {
            printf("Position out of bound.\n");
        }
    }
}


void main()
{
    int choice,a=0;
    while(choice!=5)
    {
        printf("\n\n1. Create Linked list.\n");
        printf("2. Display Linked list.\n");
        printf("3. Insert node at any position.\n");
        printf("4. Delete a node from any position.\n");
        printf("5. Exit\n\n");
        scanf("%d",&choice);
        printf("\n");
        switch(choice)
        {
            case 1: if(a==1)
                    {
                        printf("You have already created a Linked list.");
                    }
                    else
                    {   createnode();
                        a++;
                    }
                    break;

            case 2: traverse();
                    break;

            case 3: insertnode();
                    break;

            case 4: deletenode();
                    break;

            case 5: exit(0);

            defalut: printf("Enter a valid choice\n");
        }
    }
}


___________________________________________________________________________________________________________________________________________-



Q1 B


#include <stdio.h>
int main()
{
int i, low, high, mid, n, key, array[100];
printf("Enter number of elements:\n");
scanf("%d",&n);
printf("Enter %d integers :\n", n);
for(i = 0; i < n; i++)
scanf("%d",&array[i]);
printf("Enter value to find :\n");
scanf("%d", &key);
low = 0;
high = n - 1;
mid = (low+high)/2;
while (low <= high) {
if(array[mid] < key)
low = mid + 1;
else if (array[mid] == key) {
printf("%d found at location %d.", key, mid+1);
break;
}
else
high = mid - 1;
mid = (low + high)/2;
}
if(low > high)
printf("Not found! %d isn't present in the list.", key);
return 0;
}


___________________________________________________________________________________________________________________________________________-

Q2

first.php


<html>
<body>
<form method ="post" action="second.php">
<table border="1">
 <tr>
<td>customer Name:-</td>
<td><input type="text" name="name"></td>
</tr>
 <tr>
<td>customer Phone Number:-</td>
<td><input type="text" name="ph-no"></td>
</tr>
<tr>
<td>customer address:-</td>
<td><input type="text" name="address"></td>
</tr>
<tr>
<td></td>
<td><input type="submit" value="save"></td>
</tr>
</table>
</form>
</body>
</html>


second.php


<html>
<body>

 <?php
setCookie('name',$_POST["name"]);
setCookie('ph-no',$_POST["ph-no"]);
setCookie('address',$_POST["address"]);
echo"Hello".$_POST["name"]."!Enter Details....<br>";
?>

<form method ="post" action="third.php">
<table border="1">
<tr><td>Product name</td><td><input type="text" name="pname"></td></tr>
<tr><td>qty</td><td><input type="text" name="qty"></td></tr>
<tr><td>rate</td><td><input type="text" name="rate"></td></tr>
<tr><td></td><td><input type="submit" name="submit" value="DISPLAY"></td></tr>
</table>
</form>
</body>
</html>

 third.php
<html>
<body>

<?php
 echo "<b> customer Details</b><br>";
echo "<table border='1'>";
echo "<tr><td>";
echo"customerName:".$_COOKIE["name"]."<br>";
echo "</tr></td>";
echo "<tr><td>";
echo"customer phone:-".$_COOKIE["ph-no"]."<br>";
echo "</tr></td>";
echo "<tr><td>";
echo"Studcustomerent address:-".$_COOKIE["address"]."<br>";
echo "</tr></td>";
echo "<tr><td>";
echo "<b> customer Bill</b><br>";
echo "</tr></td>";
echo "<tr><td>";
echo"pname:".$_REQUEST["pname"];echo "</tr></td>";
echo "<tr><td>";
echo"qty:".$_REQUEST["qty"];echo "</tr></td>";
echo "<tr><td>";
echo"rate:".$_REQUEST["rate"];echo "</tr></td>";
echo "</table>";
if(isset($_POST['submit']))
{
 $qty=(int)$_POST['qty'];
$rate=(int)$_POST['rate'];
 $total = $qty*$rate;
 echo"Total=".$total;
}
?>
</body>
</html>

___________________________________________________________________________________________________________________________________________-


Q3


a=c(1,2,3,4,5)
b=c(2,4,5,7,8,6)
print(a)
print(b)
result=array(c(a,b),dim=c(3,3,2))
print("New Array")
print(result)
print("The second row of the second matrix of the array")
print(result[2,,2])
print("The third row of the third matrix of the array")
print(result[3,3,1])


================================================================================================================================================